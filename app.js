// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
const BOARD_SIZE = 5; // –†–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏ 5x5
const NUM_MINES = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let board = [];
let gameOver = false;

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById("game-board");
const resetButton = document.getElementById("reset-button");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    board = createBoard(BOARD_SIZE, NUM_MINES);
    gameOver = false;
    renderBoard();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –º–∏–Ω–∞–º–∏
function createBoard(size, numMines) {
    const board = Array(size).fill(null).map(() => Array(size).fill({ mine: false, revealed: false }));

    // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω
    let minesPlaced = 0;
    while (minesPlaced < numMines) {
        const row = Math.floor(Math.random() * size);
        const col = Math.floor(Math.random() * size);
        if (!board[row][col].mine) {
            board[row][col].mine = true;
            minesPlaced++;
        }
    }

    return board;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderBoard() {
    gameBoard.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç—å –¥–æ—Å–∫—É

    board.forEach((row, rowIndex) => {
        row.forEach((cell, colIndex) => {
            const cellElement = document.createElement("button");
            cellElement.classList.add("cell");
            cellElement.dataset.row = rowIndex;
            cellElement.dataset.col = colIndex;

            if (cell.revealed) {
                if (cell.mine) {
                    cellElement.classList.add("mine");
                    cellElement.textContent = "üí£";
                } else {
                    cellElement.classList.add("safe");
                    const minesAround = countMinesAround(rowIndex, colIndex);
                    cellElement.textContent = minesAround > 0 ? minesAround : "";
                }
            }

            cellElement.addEventListener("click", () => handleCellClick(rowIndex, colIndex));
            gameBoard.appendChild(cellElement);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–µ—Ç–∫—É
function handleCellClick(row, col) {
    if (gameOver || board[row][col].revealed) return;

    const cell = board[row][col];
    cell.revealed = true;

    if (cell.mine) {
        gameOver = true;
        revealAllMines();
        alert("Game Over! You hit a mine.");
    } else {
        const minesAround = countMinesAround(row, col);
        if (minesAround === 0) {
            revealSafeCells(row, col);
        }
        if (checkWin()) {
            alert("Congratulations! You found all safe cells.");
            gameOver = true;
        }
    }

    renderBoard();
}

// –ü–æ–¥—Å—á—ë—Ç –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏
function countMinesAround(row, col) {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1],         [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];

    return directions.reduce((count, [dx, dy]) => {
        const newRow = row + dx;
        const newCol = col + dy;
        if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE && board[newRow][newCol].mine) {
            count++;
        }
        return count;
    }, 0);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
function revealSafeCells(row, col) {
    const stack = [[row, col]];

    while (stack.length > 0) {
        const [currentRow, currentCol] = stack.pop();
        if (board[currentRow][currentCol].revealed) continue;

        board[currentRow][currentCol].revealed = true;

        if (countMinesAround(currentRow, currentCol) === 0) {
            const directions = [
                [-1, -1], [-1, 0], [-1, 1],
                [0, -1],         [0, 1],
                [1, -1], [1, 0], [1, 1]
            ];

            directions.forEach(([dx, dy]) => {
                const newRow = currentRow + dx;
                const newCol = currentCol + dy;
                if (newRow >= 0 && newRow < BOARD_SIZE && newCol >= 0 && newCol < BOARD_SIZE && !board[newRow][newCol].revealed) {
                    stack.push([newRow, newCol]);
                }
            });
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWin() {
    return board.every(row => row.every(cell => cell.revealed || cell.mine));
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã
function revealAllMines() {
    board.forEach(row => {
        row.forEach(cell => {
            if (cell.mine) {
                cell.revealed = true;
            }
        });
    });
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
resetButton.addEventListener("click", initGame);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initGame();
